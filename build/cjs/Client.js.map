{"version":3,"file":"Client.js","sources":["../../src/Client.ts"],"sourcesContent":["import { ServerError } from './errors/ServerError';\r\nimport { Room, RoomAvailable } from './Room';\r\nimport { SchemaConstructor } from './serializer/SchemaSerializer';\r\nimport { HTTP } from \"./HTTP\";\r\nimport { Auth } from './Auth';\r\nimport { SeatReservation } from './Protocol';\r\nimport { discordURLBuilder } from './3rd_party/discord';\r\n\r\nexport type JoinOptions = any;\r\n\r\nexport class MatchMakeError extends Error {\r\n    code: number;\r\n    constructor(message: string, code: number) {\r\n        super(message);\r\n        this.code = code;\r\n        Object.setPrototypeOf(this, MatchMakeError.prototype);\r\n    }\r\n}\r\n\r\n// - React Native does not provide `window.location`\r\n// - Cocos Creator (Native) does not provide `window.location.hostname`\r\nconst DEFAULT_ENDPOINT = (typeof (window) !== \"undefined\" &&  typeof (window?.location?.hostname) !== \"undefined\")\r\n    ? `${window.location.protocol.replace(\"http\", \"ws\")}//${window.location.hostname}${(window.location.port && `:${window.location.port}`)}`\r\n    : \"ws://127.0.0.1:2567\";\r\n\r\nexport interface EndpointSettings {\r\n    hostname: string,\r\n    secure: boolean,\r\n    port?: number,\r\n    pathname?: string,\r\n}\r\n\r\nexport class Client {\r\n    static VERSION = process.env.VERSION;\r\n\r\n    public http: HTTP;\r\n    public auth: Auth;\r\n\r\n    protected settings: EndpointSettings;\r\n    protected urlBuilder: (url: URL) => string;\r\n\r\n    constructor(\r\n        settings: string | EndpointSettings = DEFAULT_ENDPOINT,\r\n        customURLBuilder?: (url: URL) => string\r\n    ) {\r\n        if (typeof (settings) === \"string\") {\r\n\r\n            //\r\n            // endpoint by url\r\n            //\r\n            const url = (settings.startsWith(\"/\"))\r\n                ? new URL(settings, DEFAULT_ENDPOINT)\r\n                : new URL(settings);\r\n\r\n            const secure = (url.protocol === \"https:\" || url.protocol === \"wss:\");\r\n            const port = Number(url.port || (secure ? 443 : 80));\r\n\r\n            this.settings = {\r\n                hostname: url.hostname,\r\n                pathname: url.pathname,\r\n                port,\r\n                secure\r\n            };\r\n\r\n        } else {\r\n            //\r\n            // endpoint by settings\r\n            //\r\n            if (settings.port === undefined) {\r\n                settings.port = (settings.secure) ? 443 : 80;\r\n            }\r\n            if (settings.pathname === undefined) {\r\n                settings.pathname = \"\";\r\n            }\r\n            this.settings = settings;\r\n        }\r\n\r\n        // make sure pathname does not end with \"/\"\r\n        if (this.settings.pathname.endsWith(\"/\")) {\r\n            this.settings.pathname = this.settings.pathname.slice(0, -1);\r\n        }\r\n\r\n        this.http = new HTTP(this);\r\n        this.auth = new Auth(this.http);\r\n\r\n        this.urlBuilder = customURLBuilder;\r\n\r\n        //\r\n        // Discord Embedded SDK requires a custom URL builder\r\n        //\r\n        if (\r\n            !this.urlBuilder &&\r\n            typeof (window) !== \"undefined\" &&\r\n            window?.location?.hostname?.includes(\"discordsays.com\")\r\n        ) {\r\n            this.urlBuilder = discordURLBuilder;\r\n            console.log(\"Colyseus SDK: Discord Embedded SDK detected. Using custom URL builder.\");\r\n        }\r\n    }\r\n\r\n    public async joinOrCreate<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\r\n        return await this.createMatchMakeRequest<T>('joinOrCreate', roomName, options, rootSchema);\r\n    }\r\n\r\n    public async create<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\r\n        return await this.createMatchMakeRequest<T>('create', roomName, options, rootSchema);\r\n    }\r\n\r\n    public async join<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\r\n        return await this.createMatchMakeRequest<T>('join', roomName, options, rootSchema);\r\n    }\r\n\r\n    public async joinById<T>(roomId: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\r\n        return await this.createMatchMakeRequest<T>('joinById', roomId, options, rootSchema);\r\n    }\r\n\r\n    /**\r\n     * Re-establish connection with a room this client was previously connected to.\r\n     *\r\n     * @param reconnectionToken The `room.reconnectionToken` from previously connected room.\r\n     * @param rootSchema (optional) Concrete root schema definition\r\n     * @returns Promise<Room>\r\n     */\r\n    public async reconnect<T>(reconnectionToken: string, rootSchema?: SchemaConstructor<T>) {\r\n        if (typeof (reconnectionToken) === \"string\" && typeof (rootSchema) === \"string\") {\r\n            throw new Error(\"DEPRECATED: .reconnect() now only accepts 'reconnectionToken' as argument.\\nYou can get this token from previously connected `room.reconnectionToken`\");\r\n        }\r\n        const [roomId, token] = reconnectionToken.split(\":\");\r\n\t\tif (!roomId || !token) {\r\n\t\t\tthrow new Error(\"Invalid reconnection token format.\\nThe format should be roomId:reconnectionToken\");\r\n\t\t}\r\n        return await this.createMatchMakeRequest<T>('reconnect', roomId, { reconnectionToken: token }, rootSchema);\r\n    }\r\n\r\n    public async getAvailableRooms<Metadata = any>(roomName: string = \"\"): Promise<RoomAvailable<Metadata>[]> {\r\n        return (\r\n            await this.http.get(`matchmake/${roomName}`, {\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                }\r\n            })\r\n        ).data;\r\n    }\r\n\r\n    public async consumeSeatReservation<T>(\r\n        response: SeatReservation,\r\n        rootSchema?: SchemaConstructor<T>,\r\n        reuseRoomInstance?: Room // used in devMode\r\n    ): Promise<Room<T>> {\r\n        const room = this.createRoom<T>(response.room.name, rootSchema);\r\n        room.roomId = response.room.roomId;\r\n        room.sessionId = response.sessionId;\r\n\r\n        const options: any = { sessionId: room.sessionId };\r\n\r\n        // forward \"reconnection token\" in case of reconnection.\r\n        if (response.reconnectionToken) {\r\n            options.reconnectionToken = response.reconnectionToken;\r\n        }\r\n\r\n        const targetRoom = reuseRoomInstance || room;\r\n        room.connect(this.buildEndpoint(response.room, options, response.protocol), response.devMode && (async () => {\r\n            console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x1F504)} Re-establishing connection with room id '${room.roomId}'...`); // 🔄\r\n\r\n            let retryCount = 0;\r\n            let retryMaxRetries = 8;\r\n\r\n            const retryReconnection = async () => {\r\n                retryCount++;\r\n\r\n                try {\r\n                    await this.consumeSeatReservation(response, rootSchema, targetRoom);\r\n                    console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x2705)} Successfully re-established connection with room '${room.roomId}'`); // ✅\r\n\r\n                } catch (e) {\r\n                    if (retryCount < retryMaxRetries) {\r\n                        console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x1F504)} retrying... (${retryCount} out of ${retryMaxRetries})`); // 🔄\r\n                        setTimeout(retryReconnection, 2000);\r\n\r\n                    } else {\r\n                        console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x274C)} Failed to reconnect. Is your server running? Please check server logs.`); // ❌\r\n                    }\r\n                }\r\n            };\r\n\r\n            setTimeout(retryReconnection, 2000);\r\n        }), targetRoom, response);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const onError = (code, message) => reject(new ServerError(code, message));\r\n            targetRoom.onError.once(onError);\r\n\r\n            targetRoom['onJoin'].once(() => {\r\n                targetRoom.onError.remove(onError);\r\n                resolve(targetRoom);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected async createMatchMakeRequest<T>(\r\n        method: string,\r\n        roomName: string,\r\n        options: JoinOptions = {},\r\n        rootSchema?: SchemaConstructor<T>,\r\n        reuseRoomInstance?: Room,\r\n    ) {\r\n        const response = (\r\n            await this.http.post<SeatReservation>(`matchmake/${method}/${roomName}`, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(options)\r\n            })\r\n        ).data;\r\n\r\n        // FIXME: HTTP class is already handling this as ServerError.\r\n        // @ts-ignore\r\n        if (response.error) { throw new MatchMakeError(response.error, response.code); }\r\n\r\n        // forward reconnection token during \"reconnect\" methods.\r\n        if (method === \"reconnect\") {\r\n            response.reconnectionToken = options.reconnectionToken;\r\n        }\r\n\r\n        return await this.consumeSeatReservation<T>(response, rootSchema, reuseRoomInstance);\r\n    }\r\n\r\n    protected createRoom<T>(roomName: string, rootSchema?: SchemaConstructor<T>) {\r\n        return new Room<T>(roomName, rootSchema);\r\n    }\r\n\r\n    protected buildEndpoint(room: any, options: any = {}, protocol: string = \"ws\") {\r\n        const params = [];\r\n\r\n        // append provided options\r\n        for (const name in options) {\r\n            if (!options.hasOwnProperty(name)) {\r\n                continue;\r\n            }\r\n            params.push(`${name}=${options[name]}`);\r\n        }\r\n\r\n        if (protocol === \"h3\") {\r\n            protocol = \"http\";\r\n        }\r\n\r\n        let endpoint = (this.settings.secure)\r\n            ? `${protocol}s://`\r\n            : `${protocol}://`;\r\n\r\n        if (room.publicAddress) {\r\n            endpoint += `${room.publicAddress}`;\r\n\r\n        } else {\r\n            endpoint += `${this.settings.hostname}${this.getEndpointPort()}${this.settings.pathname}`;\r\n        }\r\n\r\n        const endpointURL = `${endpoint}/${room.processId}/${room.roomId}?${params.join('&')}`;\r\n        return (this.urlBuilder)\r\n            ? this.urlBuilder(new URL(endpointURL))\r\n            : endpointURL;\r\n    }\r\n\r\n    protected getHttpEndpoint(segments: string = '') {\r\n        const path = segments.startsWith(\"/\") ? segments : `/${segments}`;\r\n        const endpointURL = `${(this.settings.secure) ? \"https\" : \"http\"}://${this.settings.hostname}${this.getEndpointPort()}${this.settings.pathname}${path}`;\r\n        return (this.urlBuilder)\r\n            ? this.urlBuilder(new URL(endpointURL))\r\n            : endpointURL;\r\n    }\r\n\r\n    protected getEndpointPort() {\r\n        return (this.settings.port !== 80 && this.settings.port !== 443)\r\n            ? `:${this.settings.port}`\r\n            : \"\";\r\n    }\r\n}\r\n"],"names":["__extends","HTTP","Auth","discordURLBuilder","__awaiter","ServerError","Room"],"mappings":"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"}