{"version":3,"file":"Client.mjs","sources":["../../src/Client.ts"],"sourcesContent":["import { ServerError } from './errors/ServerError';\r\nimport { Room, RoomAvailable } from './Room';\r\nimport { SchemaConstructor } from './serializer/SchemaSerializer';\r\nimport { HTTP } from \"./HTTP\";\r\nimport { Auth } from './Auth';\r\nimport { SeatReservation } from './Protocol';\r\nimport { discordURLBuilder } from './3rd_party/discord';\r\n\r\nexport type JoinOptions = any;\r\n\r\nexport class MatchMakeError extends Error {\r\n    code: number;\r\n    constructor(message: string, code: number) {\r\n        super(message);\r\n        this.code = code;\r\n        Object.setPrototypeOf(this, MatchMakeError.prototype);\r\n    }\r\n}\r\n\r\n// - React Native does not provide `window.location`\r\n// - Cocos Creator (Native) does not provide `window.location.hostname`\r\nconst DEFAULT_ENDPOINT = (typeof (window) !== \"undefined\" &&  typeof (window?.location?.hostname) !== \"undefined\")\r\n    ? `${window.location.protocol.replace(\"http\", \"ws\")}//${window.location.hostname}${(window.location.port && `:${window.location.port}`)}`\r\n    : \"ws://127.0.0.1:2567\";\r\n\r\nexport interface EndpointSettings {\r\n    hostname: string,\r\n    secure: boolean,\r\n    port?: number,\r\n    pathname?: string,\r\n}\r\n\r\nexport class Client {\r\n    static VERSION = process.env.VERSION;\r\n\r\n    public http: HTTP;\r\n    public auth: Auth;\r\n\r\n    protected settings: EndpointSettings;\r\n    protected urlBuilder: (url: URL) => string;\r\n\r\n    constructor(\r\n        settings: string | EndpointSettings = DEFAULT_ENDPOINT,\r\n        customURLBuilder?: (url: URL) => string\r\n    ) {\r\n        if (typeof (settings) === \"string\") {\r\n\r\n            //\r\n            // endpoint by url\r\n            //\r\n            const url = (settings.startsWith(\"/\"))\r\n                ? new URL(settings, DEFAULT_ENDPOINT)\r\n                : new URL(settings);\r\n\r\n            const secure = (url.protocol === \"https:\" || url.protocol === \"wss:\");\r\n            const port = Number(url.port || (secure ? 443 : 80));\r\n\r\n            this.settings = {\r\n                hostname: url.hostname,\r\n                pathname: url.pathname,\r\n                port,\r\n                secure\r\n            };\r\n\r\n        } else {\r\n            //\r\n            // endpoint by settings\r\n            //\r\n            if (settings.port === undefined) {\r\n                settings.port = (settings.secure) ? 443 : 80;\r\n            }\r\n            if (settings.pathname === undefined) {\r\n                settings.pathname = \"\";\r\n            }\r\n            this.settings = settings;\r\n        }\r\n\r\n        // make sure pathname does not end with \"/\"\r\n        if (this.settings.pathname.endsWith(\"/\")) {\r\n            this.settings.pathname = this.settings.pathname.slice(0, -1);\r\n        }\r\n\r\n        this.http = new HTTP(this);\r\n        this.auth = new Auth(this.http);\r\n\r\n        this.urlBuilder = customURLBuilder;\r\n\r\n        //\r\n        // Discord Embedded SDK requires a custom URL builder\r\n        //\r\n        if (\r\n            !this.urlBuilder &&\r\n            typeof (window) !== \"undefined\" &&\r\n            window?.location?.hostname?.includes(\"discordsays.com\")\r\n        ) {\r\n            this.urlBuilder = discordURLBuilder;\r\n            console.log(\"Colyseus SDK: Discord Embedded SDK detected. Using custom URL builder.\");\r\n        }\r\n    }\r\n\r\n    public async joinOrCreate<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\r\n        return await this.createMatchMakeRequest<T>('joinOrCreate', roomName, options, rootSchema);\r\n    }\r\n\r\n    public async create<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\r\n        return await this.createMatchMakeRequest<T>('create', roomName, options, rootSchema);\r\n    }\r\n\r\n    public async join<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\r\n        return await this.createMatchMakeRequest<T>('join', roomName, options, rootSchema);\r\n    }\r\n\r\n    public async joinById<T>(roomId: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\r\n        return await this.createMatchMakeRequest<T>('joinById', roomId, options, rootSchema);\r\n    }\r\n\r\n    /**\r\n     * Re-establish connection with a room this client was previously connected to.\r\n     *\r\n     * @param reconnectionToken The `room.reconnectionToken` from previously connected room.\r\n     * @param rootSchema (optional) Concrete root schema definition\r\n     * @returns Promise<Room>\r\n     */\r\n    public async reconnect<T>(reconnectionToken: string, rootSchema?: SchemaConstructor<T>) {\r\n        if (typeof (reconnectionToken) === \"string\" && typeof (rootSchema) === \"string\") {\r\n            throw new Error(\"DEPRECATED: .reconnect() now only accepts 'reconnectionToken' as argument.\\nYou can get this token from previously connected `room.reconnectionToken`\");\r\n        }\r\n        const [roomId, token] = reconnectionToken.split(\":\");\r\n\t\tif (!roomId || !token) {\r\n\t\t\tthrow new Error(\"Invalid reconnection token format.\\nThe format should be roomId:reconnectionToken\");\r\n\t\t}\r\n        return await this.createMatchMakeRequest<T>('reconnect', roomId, { reconnectionToken: token }, rootSchema);\r\n    }\r\n\r\n    public async getAvailableRooms<Metadata = any>(roomName: string = \"\"): Promise<RoomAvailable<Metadata>[]> {\r\n        return (\r\n            await this.http.get(`matchmake/${roomName}`, {\r\n                headers: {\r\n                    'Accept': 'application/json'\r\n                }\r\n            })\r\n        ).data;\r\n    }\r\n\r\n    public async consumeSeatReservation<T>(\r\n        response: SeatReservation,\r\n        rootSchema?: SchemaConstructor<T>,\r\n        reuseRoomInstance?: Room // used in devMode\r\n    ): Promise<Room<T>> {\r\n        const room = this.createRoom<T>(response.room.name, rootSchema);\r\n        room.roomId = response.room.roomId;\r\n        room.sessionId = response.sessionId;\r\n\r\n        const options: any = { sessionId: room.sessionId };\r\n\r\n        // forward \"reconnection token\" in case of reconnection.\r\n        if (response.reconnectionToken) {\r\n            options.reconnectionToken = response.reconnectionToken;\r\n        }\r\n\r\n        const targetRoom = reuseRoomInstance || room;\r\n        room.connect(this.buildEndpoint(response.room, options, response.protocol), response.devMode && (async () => {\r\n            console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x1F504)} Re-establishing connection with room id '${room.roomId}'...`); // 🔄\r\n\r\n            let retryCount = 0;\r\n            let retryMaxRetries = 8;\r\n\r\n            const retryReconnection = async () => {\r\n                retryCount++;\r\n\r\n                try {\r\n                    await this.consumeSeatReservation(response, rootSchema, targetRoom);\r\n                    console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x2705)} Successfully re-established connection with room '${room.roomId}'`); // ✅\r\n\r\n                } catch (e) {\r\n                    if (retryCount < retryMaxRetries) {\r\n                        console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x1F504)} retrying... (${retryCount} out of ${retryMaxRetries})`); // 🔄\r\n                        setTimeout(retryReconnection, 2000);\r\n\r\n                    } else {\r\n                        console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x274C)} Failed to reconnect. Is your server running? Please check server logs.`); // ❌\r\n                    }\r\n                }\r\n            };\r\n\r\n            setTimeout(retryReconnection, 2000);\r\n        }), targetRoom, response);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const onError = (code, message) => reject(new ServerError(code, message));\r\n            targetRoom.onError.once(onError);\r\n\r\n            targetRoom['onJoin'].once(() => {\r\n                targetRoom.onError.remove(onError);\r\n                resolve(targetRoom);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected async createMatchMakeRequest<T>(\r\n        method: string,\r\n        roomName: string,\r\n        options: JoinOptions = {},\r\n        rootSchema?: SchemaConstructor<T>,\r\n        reuseRoomInstance?: Room,\r\n    ) {\r\n        const response = (\r\n            await this.http.post<SeatReservation>(`matchmake/${method}/${roomName}`, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(options)\r\n            })\r\n        ).data;\r\n\r\n        // FIXME: HTTP class is already handling this as ServerError.\r\n        // @ts-ignore\r\n        if (response.error) { throw new MatchMakeError(response.error, response.code); }\r\n\r\n        // forward reconnection token during \"reconnect\" methods.\r\n        if (method === \"reconnect\") {\r\n            response.reconnectionToken = options.reconnectionToken;\r\n        }\r\n\r\n        return await this.consumeSeatReservation<T>(response, rootSchema, reuseRoomInstance);\r\n    }\r\n\r\n    protected createRoom<T>(roomName: string, rootSchema?: SchemaConstructor<T>) {\r\n        return new Room<T>(roomName, rootSchema);\r\n    }\r\n\r\n    protected buildEndpoint(room: any, options: any = {}, protocol: string = \"ws\") {\r\n        const params = [];\r\n\r\n        // append provided options\r\n        for (const name in options) {\r\n            if (!options.hasOwnProperty(name)) {\r\n                continue;\r\n            }\r\n            params.push(`${name}=${options[name]}`);\r\n        }\r\n\r\n        if (protocol === \"h3\") {\r\n            protocol = \"http\";\r\n        }\r\n\r\n        let endpoint = (this.settings.secure)\r\n            ? `${protocol}s://`\r\n            : `${protocol}://`;\r\n\r\n        if (room.publicAddress) {\r\n            endpoint += `${room.publicAddress}`;\r\n\r\n        } else {\r\n            endpoint += `${this.settings.hostname}${this.getEndpointPort()}${this.settings.pathname}`;\r\n        }\r\n\r\n        const endpointURL = `${endpoint}/${room.processId}/${room.roomId}?${params.join('&')}`;\r\n        return (this.urlBuilder)\r\n            ? this.urlBuilder(new URL(endpointURL))\r\n            : endpointURL;\r\n    }\r\n\r\n    protected getHttpEndpoint(segments: string = '') {\r\n        const path = segments.startsWith(\"/\") ? segments : `/${segments}`;\r\n        const endpointURL = `${(this.settings.secure) ? \"https\" : \"http\"}://${this.settings.hostname}${this.getEndpointPort()}${this.settings.pathname}${path}`;\r\n        return (this.urlBuilder)\r\n            ? this.urlBuilder(new URL(endpointURL))\r\n            : endpointURL;\r\n    }\r\n\r\n    protected getEndpointPort() {\r\n        return (this.settings.port !== 80 && this.settings.port !== 443)\r\n            ? `:${this.settings.port}`\r\n            : \"\";\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}