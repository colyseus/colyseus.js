{"version":3,"file":"Room.mjs","sources":["../../src/Room.ts"],"sourcesContent":["import { Connection } from './Connection';\r\nimport { Protocol } from './Protocol';\r\nimport { getSerializer, Serializer } from './serializer/Serializer';\r\n\r\n// The unused imports here are important for better `.d.ts` file generation\r\n// (Later merged with `dts-bundle-generator`)\r\nimport { createNanoEvents } from './core/nanoevents';\r\nimport { createSignal } from './core/signal';\r\n\r\nimport { decode, encode, Iterator } from '@colyseus/schema';\r\nimport { SchemaConstructor, SchemaSerializer } from './serializer/SchemaSerializer';\r\nimport { CloseCode } from './errors/ServerError';\r\n\r\nimport { Packr, unpack } from '@colyseus/msgpackr';\r\n\r\nexport interface RoomAvailable<Metadata = any> {\r\n    name: string;\r\n    roomId: string;\r\n    clients: number;\r\n    maxClients: number;\r\n    metadata?: Metadata;\r\n}\r\n\r\nexport class Room<State= any> {\r\n    public roomId: string;\r\n    public sessionId: string;\r\n    public reconnectionToken: string;\r\n\r\n    public name: string;\r\n    public connection: Connection;\r\n\r\n    // Public signals\r\n    public onStateChange = createSignal<(state: State) => void>();\r\n    public onError = createSignal<(code: number, message?: string) => void>();\r\n    public onLeave = createSignal<(code: number) => void>();\r\n    protected onJoin = createSignal();\r\n\r\n    public serializerId: string;\r\n    public serializer: Serializer<State>;\r\n\r\n    protected hasJoined: boolean = false;\r\n\r\n    // TODO: remove me on 1.0.0\r\n    protected rootSchema: SchemaConstructor<State>;\r\n\r\n    protected onMessageHandlers = createNanoEvents();\r\n\r\n    protected packr: Packr;\r\n\r\n    constructor(name: string, rootSchema?: SchemaConstructor<State>) {\r\n        this.roomId = null;\r\n        this.name = name;\r\n\r\n        this.packr = new Packr();\r\n\r\n        // msgpackr workaround: force buffer to be created.\r\n        this.packr.encode(undefined);\r\n\r\n        if (rootSchema) {\r\n            this.serializer = new (getSerializer(\"schema\"));\r\n            this.rootSchema = rootSchema;\r\n            (this.serializer as SchemaSerializer).state = new rootSchema();\r\n        }\r\n\r\n        this.onError((code, message) => console.warn?.(`colyseus.js - onError => (${code}) ${message}`));\r\n        this.onLeave(() => this.removeAllListeners());\r\n    }\r\n\r\n    public connect(\r\n        endpoint: string,\r\n        devModeCloseCallback?: () => void,\r\n        room: Room = this, // when reconnecting on devMode, re-use previous room intance for handling events.\r\n        options?: any,\r\n    ) {\r\n        const connection = new Connection(options.protocol);\r\n        room.connection = connection;\r\n\r\n        connection.events.onmessage = Room.prototype.onMessageCallback.bind(room);\r\n        connection.events.onclose = function (e: CloseEvent) {\r\n            if (!room.hasJoined) {\r\n                console.warn?.(`Room connection was closed unexpectedly (${e.code}): ${e.reason}`);\r\n                room.onError.invoke(e.code, e.reason);\r\n                return;\r\n            }\r\n            if (e.code === CloseCode.DEVMODE_RESTART && devModeCloseCallback) {\r\n                devModeCloseCallback();\r\n            } else {\r\n                room.onLeave.invoke(e.code);\r\n                room.destroy();\r\n            }\r\n        };\r\n        connection.events.onerror = function (e: CloseEvent) {\r\n            console.warn?.(`Room, onError (${e.code}): ${e.reason}`);\r\n            room.onError.invoke(e.code, e.reason);\r\n        };\r\n\r\n        // FIXME: refactor this.\r\n        if (options.protocol === \"h3\") {\r\n            const url = new URL(endpoint);\r\n            connection.connect(url.origin, options);\r\n\r\n        } else {\r\n            connection.connect(endpoint);\r\n        }\r\n\r\n    }\r\n\r\n    public leave(consented: boolean = true): Promise<number> {\r\n        return new Promise((resolve) => {\r\n            this.onLeave((code) => resolve(code));\r\n\r\n            if (this.connection) {\r\n                if (consented) {\r\n                    this.packr.buffer[0] = Protocol.LEAVE_ROOM;\r\n                    this.connection.send(this.packr.buffer.subarray(0, 1));\r\n\r\n                } else {\r\n                    this.connection.close();\r\n                }\r\n\r\n            } else {\r\n                this.onLeave.invoke(CloseCode.CONSENTED);\r\n            }\r\n        });\r\n    }\r\n\r\n    public onMessage<T = any>(type: \"*\", callback: (type: string | number, message: T) => void)\r\n    public onMessage<T = any>(type: string | number, callback: (message: T) => void)\r\n    public onMessage(type: '*' | string | number, callback: (...args: any[]) => void) {\r\n        return this.onMessageHandlers.on(this.getMessageHandlerKey(type), callback);\r\n    }\r\n\r\n    public send<T = any>(type: string | number, message?: T): void {\r\n        const it: Iterator = { offset: 1 };\r\n        this.packr.buffer[0] = Protocol.ROOM_DATA;\r\n\r\n        if (typeof(type) === \"string\") {\r\n            encode.string(this.packr.buffer, type, it);\r\n\r\n        } else {\r\n            encode.number(this.packr.buffer, type, it);\r\n        }\r\n\r\n        // force packr to use beginning of the buffer\r\n        this.packr.position = 0;\r\n\r\n        const data = (message !== undefined)\r\n            ? this.packr.pack(message, 2048 + it.offset) // 2048 = RESERVE_START_SPACE\r\n            : this.packr.buffer.subarray(0, it.offset);\r\n\r\n        this.connection.send(data);\r\n    }\r\n\r\n    public sendUnreliable<T = any>(type: string | number, message?: T): void {\r\n        const it: Iterator = { offset: 1 };\r\n        this.packr.buffer[0] = Protocol.ROOM_DATA;\r\n\r\n        if (typeof(type) === \"string\") {\r\n            encode.string(this.packr.buffer, type, it);\r\n\r\n        } else {\r\n            encode.number(this.packr.buffer, type, it);\r\n        }\r\n\r\n        // force packr to use beginning of the buffer\r\n        this.packr.position = 0;\r\n\r\n        const data = (message !== undefined)\r\n            ? this.packr.pack(message, 2048 + it.offset) // 2048 = RESERVE_START_SPACE\r\n            : this.packr.buffer.subarray(0, it.offset);\r\n\r\n        this.connection.sendUnreliable(data);\r\n    }\r\n\r\n    public sendBytes(type: string | number, bytes: Uint8Array) {\r\n        const it: Iterator = { offset: 1 };\r\n        this.packr.buffer[0] = Protocol.ROOM_DATA_BYTES;\r\n\r\n        if (typeof(type) === \"string\") {\r\n            encode.string(this.packr.buffer, type, it);\r\n\r\n        } else {\r\n            encode.number(this.packr.buffer, type, it);\r\n        }\r\n\r\n        this.packr.buffer.set(bytes, it.offset);\r\n        this.connection.send(this.packr.buffer.subarray(0, it.offset + bytes.byteLength));\r\n    }\r\n\r\n    public get state (): State {\r\n        return this.serializer.getState();\r\n    }\r\n\r\n    public removeAllListeners() {\r\n        this.onJoin.clear();\r\n        this.onStateChange.clear();\r\n        this.onError.clear();\r\n        this.onLeave.clear();\r\n        this.onMessageHandlers.events = {};\r\n\r\n        if (this.serializer instanceof SchemaSerializer) {\r\n            // Remove callback references\r\n            this.serializer.decoder.root.callbacks = {};\r\n        }\r\n    }\r\n\r\n    protected onMessageCallback(event: MessageEvent) {\r\n        const buffer = new Uint8Array(event.data);\r\n\r\n        const it: Iterator = { offset: 1 };\r\n        const code = buffer[0];\r\n\r\n        if (code === Protocol.JOIN_ROOM) {\r\n            const reconnectionToken = decode.utf8Read(buffer, it, buffer[it.offset++]);\r\n            this.serializerId = decode.utf8Read(buffer, it, buffer[it.offset++]);\r\n\r\n            // Instantiate serializer if not locally available.\r\n            if (!this.serializer) {\r\n                const serializer = getSerializer(this.serializerId);\r\n                this.serializer = new serializer();\r\n            }\r\n\r\n            if (buffer.byteLength > it.offset && this.serializer.handshake) {\r\n                this.serializer.handshake(buffer, it);\r\n            }\r\n\r\n            this.reconnectionToken = `${this.roomId}:${reconnectionToken}`;\r\n\r\n            this.hasJoined = true;\r\n            this.onJoin.invoke();\r\n\r\n            // acknowledge successfull JOIN_ROOM\r\n            this.packr.buffer[0] = Protocol.JOIN_ROOM;\r\n            this.connection.send(this.packr.buffer.subarray(0, 1));\r\n\r\n        } else if (code === Protocol.ERROR) {\r\n            const code = decode.number(buffer, it);\r\n            const message = decode.string(buffer, it);\r\n\r\n            this.onError.invoke(code, message);\r\n\r\n        } else if (code === Protocol.LEAVE_ROOM) {\r\n            this.leave();\r\n\r\n        } else if (code === Protocol.ROOM_STATE) {\r\n            this.serializer.setState(buffer, it);\r\n            this.onStateChange.invoke(this.serializer.getState());\r\n\r\n        } else if (code === Protocol.ROOM_STATE_PATCH) {\r\n            this.serializer.patch(buffer, it);\r\n            this.onStateChange.invoke(this.serializer.getState());\r\n\r\n        } else if (code === Protocol.ROOM_DATA) {\r\n            const type = (decode.stringCheck(buffer, it))\r\n                ? decode.string(buffer, it)\r\n                : decode.number(buffer, it);\r\n\r\n            const message = (buffer.byteLength > it.offset)\r\n                ? unpack(buffer, { start: it.offset })\r\n                : undefined;\r\n\r\n            this.dispatchMessage(type, message);\r\n\r\n        } else if (code === Protocol.ROOM_DATA_BYTES) {\r\n            const type = (decode.stringCheck(buffer, it))\r\n                ? decode.string(buffer, it)\r\n                : decode.number(buffer, it);\r\n\r\n            this.dispatchMessage(type, buffer.subarray(it.offset));\r\n        }\r\n    }\r\n\r\n    private dispatchMessage(type: string | number, message: any) {\r\n        const messageType = this.getMessageHandlerKey(type);\r\n\r\n        if (this.onMessageHandlers.events[messageType]) {\r\n            this.onMessageHandlers.emit(messageType, message);\r\n\r\n        } else if (this.onMessageHandlers.events['*']) {\r\n            this.onMessageHandlers.emit('*', type, message);\r\n\r\n        } else {\r\n            console.warn?.(`colyseus.js: onMessage() not registered for type '${type}'.`);\r\n        }\r\n    }\r\n\r\n    private destroy () {\r\n        if (this.serializer) {\r\n            this.serializer.teardown();\r\n        }\r\n    }\r\n\r\n    private getMessageHandlerKey(type: string | number): string {\r\n        switch (typeof(type)) {\r\n            // string\r\n            case \"string\": return type;\r\n\r\n            // number\r\n            case \"number\": return `i${type}`;\r\n\r\n            default: throw new Error(\"invalid message type.\");\r\n        }\r\n    }\r\n\r\n}\r\n"],"names":[],"mappings":"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"}